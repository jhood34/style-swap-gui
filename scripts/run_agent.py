#!/usr/bin/env python3
"""CLI entry point for the style transfer agent.
Utilises code generated by OpenAi's GPT-5 Codex model"""

from __future__ import annotations

import argparse
import sys
from pathlib import Path

PROJECT_ROOT = Path(__file__).resolve().parents[1]
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))

from src.agent import AgentConfig, StyleTransferAgent
from src.utils.filesystem import cleanup_files


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Apply reference style to input images.")
    parser.add_argument(
        "--references",
        type=Path,
        default=Path("data/references"),
        help="Directory containing reference images.",
    )
    parser.add_argument(
        "--inputs",
        type=Path,
        default=Path("data/inputs"),
        help="Directory containing images to stylise.",
    )
    parser.add_argument(
        "--outputs",
        type=Path,
        default=Path("outputs/styled"),
        help="Directory for styled outputs.",
    )
    parser.add_argument(
        "--device",
        default=None,
        help="Torch device to use (default auto).",
    )
    parser.add_argument(
        "--interactive",
        action="store_true",
        help="Enable human-in-the-loop adjustments after initial run.",
    )
    return parser.parse_args()


def main() -> None:
    """Parse CLI flags, invoke the agent, and always clean up temporary folders."""
    args = parse_args()
    config = AgentConfig(
        reference_dir=args.references,
        input_dir=args.inputs,
        output_dir=args.outputs,
        device=args.device,
        interactive=args.interactive,
    )
    agent = StyleTransferAgent(config)
    try:
        outputs = agent.run()
        for path in outputs:
            print(f"Styled image written to {path}")
    finally:
        cleanup_files((args.references, args.inputs, args.outputs))


if __name__ == "__main__":
    main()
